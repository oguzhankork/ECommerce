// <auto-generated />
using System;
using ECommerce.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce.MVC.Migrations
{
    [DbContext(typeof(EcommerceContext))]
    [Migration("20240604101629_Shipper")]
    partial class Shipper
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerce.Model.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ECommerce.Model.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ECommerce.Model.Entities.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryName = "Test Category 1",
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 123, DateTimeKind.Local).AddTicks(9129),
                            CreatedIpAddress = "192.168.1.1",
                            Description = "Test Category 1 Description",
                            IsActive = true,
                            MasterId = new Guid("9528c5aa-3b3e-46cd-83b9-000d6b7496ff"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2,
                            CategoryName = "Test Category 2",
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 123, DateTimeKind.Local).AddTicks(9264),
                            CreatedIpAddress = "192.168.1.1",
                            Description = "Test Category 2 Description",
                            IsActive = true,
                            MasterId = new Guid("cfe7e4bf-0788-410c-9775-309b17b7eb0f"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 3,
                            CategoryName = "Test Category 3",
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 123, DateTimeKind.Local).AddTicks(9305),
                            CreatedIpAddress = "192.168.1.1",
                            Description = "Test Category 3 Description",
                            IsActive = true,
                            MasterId = new Guid("75dbf7aa-de92-45e4-aef7-9d3b23d0be1b"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ECommerce.Model.Entities.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ShipperId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ShipperId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ECommerce.Model.Entities.OrderDetail", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ECommerce.Model.Entities.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierID")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short>("UnitsInStock")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 11,
                            CategoryId = 1,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(1980),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("deb270a1-8870-44a2-8728-d6d71fe261f1"),
                            ProductName = "Fish",
                            Status = 0,
                            UnitPrice = 4911.97m,
                            UnitsInStock = (short)55,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 12,
                            CategoryId = 1,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(2334),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("f4b6c28c-6c7c-4208-826d-eaa917bbc854"),
                            ProductName = "Cheese",
                            Status = 0,
                            UnitPrice = 1116.81m,
                            UnitsInStock = (short)63,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 13,
                            CategoryId = 1,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(2415),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("7ffcbc5d-7d12-4045-b756-8f83e1e2b0d5"),
                            ProductName = "Sausages",
                            Status = 0,
                            UnitPrice = 3629.78m,
                            UnitsInStock = (short)61,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 14,
                            CategoryId = 1,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(2484),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("c86c33ae-21ad-4f3d-95a4-07853addd2d8"),
                            ProductName = "Soap",
                            Status = 0,
                            UnitPrice = 3470.58m,
                            UnitsInStock = (short)64,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 15,
                            CategoryId = 1,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(2547),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("ed2e48f8-8724-4920-887f-54cf3b3a8800"),
                            ProductName = "Car",
                            Status = 0,
                            UnitPrice = 3334.94m,
                            UnitsInStock = (short)30,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 16,
                            CategoryId = 1,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(2615),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("34affa34-f825-495b-ab3b-d63a971cac38"),
                            ProductName = "Tuna",
                            Status = 0,
                            UnitPrice = 1740.20m,
                            UnitsInStock = (short)81,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 17,
                            CategoryId = 1,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(2678),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("3e5e4291-d18e-4e4d-9ad2-337ee316a5fa"),
                            ProductName = "Salad",
                            Status = 0,
                            UnitPrice = 4276.46m,
                            UnitsInStock = (short)38,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 18,
                            CategoryId = 1,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(2740),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("2cbca052-5b9f-485c-bd75-8345872c35d1"),
                            ProductName = "Keyboard",
                            Status = 0,
                            UnitPrice = 1340.38m,
                            UnitsInStock = (short)93,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 19,
                            CategoryId = 1,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(2821),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("0dc1c59b-1b2c-4e71-9f76-e6ed3c743f6e"),
                            ProductName = "Car",
                            Status = 0,
                            UnitPrice = 2988.98m,
                            UnitsInStock = (short)88,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 20,
                            CategoryId = 1,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(2964),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("a0eceb88-94ba-4a1f-b29e-cf560ab6faa2"),
                            ProductName = "Shoes",
                            Status = 0,
                            UnitPrice = 460.06m,
                            UnitsInStock = (short)98,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 21,
                            CategoryId = 2,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(3045),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("14bbd48c-c15b-4bc3-b272-c339d0b90b4b"),
                            ProductName = "Computer",
                            Status = 0,
                            UnitPrice = 6694.34m,
                            UnitsInStock = (short)54,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 22,
                            CategoryId = 2,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(3109),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("ade290ac-e1e4-4d2e-b897-845136f0c507"),
                            ProductName = "Hat",
                            Status = 0,
                            UnitPrice = 5913.24m,
                            UnitsInStock = (short)32,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 23,
                            CategoryId = 2,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(3170),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("ea5aa93f-2e07-4407-9cd9-0b4f229765a9"),
                            ProductName = "Fish",
                            Status = 0,
                            UnitPrice = 6597.83m,
                            UnitsInStock = (short)41,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 24,
                            CategoryId = 2,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(3231),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("42c522d3-c992-43e5-9f49-1d153e3e72ab"),
                            ProductName = "Sausages",
                            Status = 0,
                            UnitPrice = 1646.80m,
                            UnitsInStock = (short)7,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 25,
                            CategoryId = 2,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(3291),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("c99c6eb4-b0ca-45d7-ad82-3ea040466164"),
                            ProductName = "Car",
                            Status = 0,
                            UnitPrice = 2559.91m,
                            UnitsInStock = (short)92,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 26,
                            CategoryId = 2,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(3351),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("c3ba79b6-246a-4ded-ac5d-924bfb769754"),
                            ProductName = "Towels",
                            Status = 0,
                            UnitPrice = 8416.93m,
                            UnitsInStock = (short)91,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 27,
                            CategoryId = 2,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(3417),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("fc4d7dce-ee37-4554-bdf2-c0a8f852ce2f"),
                            ProductName = "Pizza",
                            Status = 0,
                            UnitPrice = 7818.21m,
                            UnitsInStock = (short)28,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 28,
                            CategoryId = 2,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(3482),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("ea70d2b4-f9eb-4933-9c2a-f19614bfeaca"),
                            ProductName = "Sausages",
                            Status = 0,
                            UnitPrice = 5564.99m,
                            UnitsInStock = (short)13,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 29,
                            CategoryId = 2,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(3544),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("e5b41a01-769b-41a7-9d09-ac96d9ad5b79"),
                            ProductName = "Shoes",
                            Status = 0,
                            UnitPrice = 8687.44m,
                            UnitsInStock = (short)55,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 30,
                            CategoryId = 2,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(3603),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("eaf2ce4c-3a6b-48fe-8e6b-a84c46c34570"),
                            ProductName = "Pants",
                            Status = 0,
                            UnitPrice = 1624.20m,
                            UnitsInStock = (short)45,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ECommerce.Model.Entities.Shipper", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Shippers");
                });

            modelBuilder.Entity("ECommerce.Model.Entities.Supplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Address = "Test Supplier Adress1",
                            CompanyName = "Test Supplier1",
                            ContactName = "Test Contact1",
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(6035),
                            CreatedIpAddress = "192.168.1.1",
                            IsActive = true,
                            MasterId = new Guid("251005ad-444e-404e-a596-cb51329aa3f3"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2,
                            Address = "Test Supplier Adress2",
                            CompanyName = "Test Supplier2",
                            ContactName = "Test Contact2",
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(6090),
                            CreatedIpAddress = "192.168.1.1",
                            IsActive = true,
                            MasterId = new Guid("d4a3e6f1-c40c-43d7-8620-1fde22930e50"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 3,
                            Address = "TestSupplierAdress3",
                            CompanyName = "TestSupplier3",
                            ContactName = "Test Contact3",
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 6, 4, 13, 16, 29, 127, DateTimeKind.Local).AddTicks(6123),
                            CreatedIpAddress = "192.168.1.1",
                            IsActive = true,
                            MasterId = new Guid("f1812691-7cbe-44b9-a076-f7ce2700de4d"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ECommerce.Model.Entities.Order", b =>
                {
                    b.HasOne("ECommerce.Model.Entities.Shipper", "Shipper")
                        .WithMany("Orders")
                        .HasForeignKey("ShipperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Model.Entities.AppUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shipper");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerce.Model.Entities.OrderDetail", b =>
                {
                    b.HasOne("ECommerce.Model.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Model.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.Model.Entities.Product", b =>
                {
                    b.HasOne("ECommerce.Model.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Model.Entities.Supplier", null)
                        .WithMany("Products")
                        .HasForeignKey("SupplierID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ECommerce.Model.Entities.AppUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ECommerce.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ECommerce.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ECommerce.Model.Entities.AppUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ECommerce.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Model.Entities.AppUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ECommerce.Model.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommerce.Model.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ECommerce.Model.Entities.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ECommerce.Model.Entities.Shipper", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ECommerce.Model.Entities.Supplier", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
